// Learn more: https://pris.ly/d/prisma-schema
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/* ─────────── Users (tùy dự án, không dùng auth vẫn giữ làm mẫu) ─────────── */
model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  role      String   @default("USER")
  createdAt DateTime @default(now())
}

/* ─────────── Surgeon (bác sĩ / resource) ─────────── */
model Surgeon {
  id       Int       @id @default(autoincrement())
  name     String
  bookings Booking[]
}

/* ─────────── Booking (đặt lịch theo khoảng thời gian) ───────────
   LƯU Ý: Không dùng unique/slot ở đây. Chống trùng giờ làm bằng
   PostgreSQL Exclusion Constraint (thêm ở migration.sql).
------------------------------------------------------------------ */
model Booking {
  id          Int      @id @default(autoincrement())

  surgeonId   Int
  surgeon     Surgeon  @relation(fields: [surgeonId], references: [id])

  startAt     DateTime // UTC
  endAt       DateTime // UTC; phải > startAt (check constraint ở migration.sql)

  // Thông tin form (không yêu cầu đăng nhập)
  patientName String
  bookerName  String?
  phone       String
  diseaseType String?

  status      BookingStatus @default(PENDING)
  createdAt   DateTime      @default(now())

  @@index([surgeonId, startAt])
  @@index([surgeonId, endAt])
}

/* ─────────── Slot (tuỳ chọn: dùng render lưới 15’ cho UI) ───────────
   Không ảnh hưởng đến logic chặn trùng; có thể bỏ nếu không cần.
------------------------------------------------------------------- */
model Slot {
  id        Int       @id @default(autoincrement())
  startAt   DateTime  @unique   // mỗi 15 phút một record (UTC)
  durationM Int       @default(15)
  createdAt DateTime  @default(now())
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
}